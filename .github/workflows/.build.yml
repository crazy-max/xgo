# reusable workflow
name: .build

on:
  workflow_call:
    inputs:
      go_version:
        type: string
        required: true
      latest_current:
        type: string
        required: true
      latest_previous:
        type: string
        required: true

env:
  DOCKERHUB_SLUG: crazymax/xgo
  GHCR_SLUG: ghcr.io/crazy-max/xgo

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Create matrix
        id: platforms
        run: |
          echo "matrix=$(docker buildx bake image-all --print | jq -cr '.target."image-all".platforms')" >>${GITHUB_OUTPUT}
      -
        name: Show matrix
        run: |
          echo ${{ steps.platforms.outputs.matrix }}
      -
        name: Tags
        id: tags
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const os = require('os');
            const majorMinor = "${{ inputs.go_version }}".match(/[0-9]+\.[0-9]+/g)[0];
            const tags = ["${{ inputs.go_version }}"];
            switch ("${{ inputs.go_version }}") {
              case "${{ inputs.latest_current }}": {
                tags.push(`${majorMinor}.x`, majorMinor, "latest");
                break;
              }
              case "${{ inputs.latest_previous }}": {
                tags.push(`${majorMinor}.x`, majorMinor);
                break;
              }
            }
            return tags.join(os.EOL);
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
            ${{ env.GHCR_SLUG }}
          tags: ${{ steps.tags.outputs.result }}
          labels: |
            org.opencontainers.image.title=xgo (go-${{ inputs.go_version }})
            org.opencontainers.image.description=Go CGO cross compiler
            org.opencontainers.image.vendor=CrazyMax
      -
        name: Rename meta bake definition file
        run: |
          mv "${{ steps.meta.outputs.bake-file }}" "/tmp/bake-meta.json"
      -
        name: Upload meta bake definition
        uses: actions/upload-artifact@v4
        with:
          name: bake-meta-${{ inputs.go_version }}
          path: /tmp/bake-meta.json
          if-no-files-found: error
          retention-days: 1

  build:
    runs-on: ${{ startsWith(matrix.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      -
        name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta-${{ inputs.go_version }}
          path: /tmp
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build
        id: bake
        uses: docker/bake-action@v5
        with:
          files: |
            ./docker-bake.hcl
            /tmp/bake-meta.json
          targets: image
          set: |
            *.tags=
            *.platform=${{ matrix.platform }}
            *.args.GO_VERSION=${{ inputs.go_version }}
            *.cache-from=type=gha,scope=go-${{ inputs.go_version }}-${{ env.PLATFORM_PAIR }}
            *.cache-to=type=gha,scope=go-${{ inputs.go_version }}-${{ env.PLATFORM_PAIR }}
            *.output=type=image,"name=${{ env.DOCKERHUB_SLUG }},${{ env.GHCR_SLUG }}",push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
      -
        name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ fromJSON(steps.bake.outputs.metadata).image['containerimage.digest'] }}"
          touch "/tmp/digests/${digest#sha256:}"
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ inputs.go_version }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - build
    steps:
      -
        name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta-${{ inputs.go_version }}
          path: /tmp
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ inputs.go_version }}-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("${{ env.DOCKERHUB_SLUG }}")) | "-t " + .) | join(" ")' /tmp/bake-meta.json) \
            $(printf '${{ env.DOCKERHUB_SLUG }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.target."docker-metadata-action".tags | map(select(startswith("${{ env.GHCR_SLUG }}")) | "-t " + .) | join(" ")' /tmp/bake-meta.json) \
            $(printf '${{ env.GHCR_SLUG }}@sha256:%s ' *)
      -
        name: Inspect image
        run: |
          tag=$(jq -r '.target."docker-metadata-action".args.DOCKER_META_VERSION' /tmp/bake-meta.json)
          docker buildx imagetools inspect ${{ env.DOCKERHUB_SLUG }}:${tag}
          docker buildx imagetools inspect ${{ env.GHCR_SLUG }}:${tag}
