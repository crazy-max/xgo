#!/usr/bin/env bash

#
# Contains the Go tool-chain pure-Go bootstrapper, that as of Go 1.5, initiates
# not only a few pre-built Go cross compilers, but rather bootstraps all of the
# supported platforms from the origin Linux amd64 distribution.
#
# Usage: xgo-bootstrap-pure
#
# Environment variables for remote bootstrapping:
#   GO_DIST_URL   - 64 bit Linux Go binary distribution package url
#   GO_DIST_SHA   - 64 bit Linux Go distribution package checksum
#
# Environment variables for local bootstrapping:
#   GOROOT - Path to the lready installed Go runtime
set -e

# Fix last digit
if [ "$(echo "$GO_VERSION" | tr -cd '.' | wc -c)" != "2" ]; then
  export GO_VERSION="${GO_VERSION}.0"
fi
echo "Go version $GO_VERSION"

# Download, verify and install the root distribution if pulled remotely
if [ "$GOROOT" == "" ]; then
  xgo-fetch $GO_DIST_URL $GO_DIST_SHA

  tar -C /usr/local -xzf $(basename $GO_DIST_URL)
  rm -f $(basename $GO_DIST_URL)

  export GOROOT=/usr/local/go
fi
export GOROOT_BOOTSTRAP=$GOROOT

# Pre-build all guest distributions based on the root distribution
echo "Bootstrapping linux/386..."
(set -x ; GOOS=linux GOARCH=386 CGO_ENABLED=1 CC=i686-linux-gnu-gcc go install std)

echo "Bootstrapping linux/amd64..."
(set -x ; GOOS=linux GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-linux-gnu-gcc go install std)

echo "Bootstrapping linux/arm64..."
(set -x ; GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc go install std)

if [ "$(semver compare "$GO_VERSION" "1.7.0")" -ge 0 ]; then
  echo "Bootstrapping linux/mips64..."
  (set -x ; GOOS=linux GOARCH=mips64 CGO_ENABLED=1 CC=mips64-linux-gnuabi64-gcc go install std)

  echo "Bootstrapping linux/mips64le..."
  (set -x ; GOOS=linux GOARCH=mips64le CGO_ENABLED=1 CC=mips64el-linux-gnuabi64-gcc go install std)
fi

if [ "$(semver compare "$GO_VERSION" "1.8.0")" -ge 0 ]; then
  echo "Bootstrapping linux/mips..."
  (set -x ; GOOS=linux GOARCH=mips CGO_ENABLED=1 CC=mips-linux-gnu-gcc go install std)

  echo "Bootstrapping linux/mipsle..."
  (set -x ; GOOS=linux GOARCH=mipsle CGO_ENABLED=1 CC=mipsel-linux-gnu-gcc go install std)

  echo "Bootstrapping linux/ppc64le..."
  (set -x ; GOOS=linux GOARCH=ppc64le CGO_ENABLED=1 CC=powerpc64le-linux-gnu-gcc go install std)

  echo "Bootstrapping linux/s390x..."
  (set -x ; GOOS=linux GOARCH=s390x CGO_ENABLED=1 CC=s390x-linux-gnu-gcc go install std)
fi

if [ "$(semver compare "$GO_VERSION" "1.16.0")" -ge 0 ]; then
  echo "Bootstrapping linux/riscv64..."
  (set -x ; GOOS=linux GOARCH=riscv64 CGO_ENABLED=1 CC=riscv64-linux-gnu-gcc go install std)
fi

echo "Bootstrapping windows/amd64..."
(set -x ; GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go install std)

echo "Bootstrapping windows/386..."
(set -x ; GOOS=windows GOARCH=386 CGO_ENABLED=1 CC=i686-w64-mingw32-gcc go install std)

# FIXME: gcc_libinit_windows.c:8:10: fatal error: 'windows.h' file not found
#if [ "$(semver compare "$GO_VERSION" "1.17.0")" -ge 0 ]; then
#  echo "Bootstrapping windows/arm64..."
#  (set -x ; GOOS=windows GOARCH=arm64 CGO_ENABLED=1 CC=aarch64-w64-mingw32-gcc go install std)
#fi

echo "Bootstrapping darwin/amd64..."
(set -x ; GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 CC=o64-clang go install std)

if [ "$(semver compare "$GO_VERSION" "1.15.0")" -lt 0 ]; then
  echo "Bootstrapping darwin/386..."
  (set -x ; GOOS=darwin GOARCH=386 CGO_ENABLED=1 CC=o32-clang go install std)
fi

if [ "$(semver compare "$GO_VERSION" "1.16.0")" -ge 0 ]; then
  echo "Bootstrapping darwin/arm64..."
  (set -x ; GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 CC=o64-clang go install std)
fi
